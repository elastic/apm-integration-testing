setup.template.settings:
  index.number_of_shards: 1
  index.codec: best_compression
  index.number_of_replicas: 0

setup.kibana:
  host: "kibana:5601"

output.elasticsearch:
  hosts: '${ELASTICSEARCH_HOSTS:elasticsearch:9200}'
  username: '${ELASTICSEARCH_USERNAME:}'
  password: '${ELASTICSEARCH_PASSWORD:}'

logging.json: true
logging.metrics.enabled: false

xpack.monitoring.enabled: true
###################################################################################################
## autodiscover
###################################################################################################
filebeat.autodiscover:
  providers:
    - type: docker
      templates:
      - condition:
          contains:
            docker.container.image: "apm-server"
        config:
          - type: docker
            containers.ids:
              - "${data.docker.container.id}"
            processors:
              - decode_json_fields:
                  fields: ["message"]
                  target: "apm-server"
      - condition:
          contains:
            docker.container.image: "filebeat"
        config:
          - type: docker
            containers.ids:
              - "${data.docker.container.id}"
            processors:
              - decode_json_fields:
                  fields: ["message"]
                  target: "filebeat"
      - condition:
          contains:
            docker.container.image: "heartbeat"
        config:
          - type: docker
            containers.ids:
              - "${data.docker.container.id}"
            processors:
              - decode_json_fields:
                  fields: ["message"]
      - condition:
          contains:
            docker.container.image: "kibana"
        config:
          - type: docker
            containers.ids:
              - "${data.docker.container.id}"
            processors:
              - decode_json_fields:
                  fields: ["message"]
                  target: "kibana"
      - condition:
          contains:
            docker.container.image: "metricbeat"
        config:
          - type: docker
            containers.ids:
              - "${data.docker.container.id}"
            processors:
              - decode_json_fields:
                  fields: ["message"]
                  target: "metricbeat"
      - condition:
          contains:
            docker.container.image: "opbeans-node"
        config:
          - type: docker
            containers.ids:
              - "${data.docker.container.id}"
            multiline.pattern: '^ '
            multiline.negate: false
            multiline.match: after
      - condition:
          contains:
            docker.container.image: "opbeans-go"
        config:
          - type: docker
            containers.ids:
              - "${data.docker.container.id}"
            processors:
              - decode_json_fields:
                  fields: ["message"]
                  target: "opbeans-go"
      - condition:
          contains:
            docker.container.image: "postgres"
        config:
          - type: docker
            containers.ids:
              - "${data.docker.container.id}"
            multiline.pattern: '^\t'
            multiline.negate: false
            multiline.match: after
      - condition:
          and:
            - not:
                contains:
                  docker.container.image: "apm-server"
            - not:
                contains:
                  docker.container.image: "filebeat"
            - not:
                contains:
                  docker.container.image: "heartbeat"
            - not:
                contains:
                  docker.container.image: "kibana"
            - not:
                contains:
                  docker.container.image: "metricbeat"
            - not:
                contains:
                  docker.container.image: "opbeans-node"
            - not:
                contains:
                  docker.container.image: "opbeans-go"
            - not:
                contains:
                  docker.container.image: "postgres"
        config:
          - type: docker
            containers.ids:
              - "${data.docker.container.id}"
