#!/usr/bin/env groovy
@Library('apm@current') _

import groovy.transform.Field

/**
 This is required to store the build status for the downstream jobs.
*/
@Field def itsDownstreamJobs = [:]

pipeline {
  agent { label 'linux && immutable' }
  environment {
    BASE_DIR = 'src/github.com/elastic/apm-integration-testing'
    NOTIFY_TO = credentials('notify-to')
    JOB_GCS_BUCKET = credentials('gcs-bucket')
    PIPELINE_LOG_LEVEL='INFO'
    GIT_REFERENCE_REPO = '/var/lib/jenkins/.git-references/apm-integration-testing.git'
  }
  triggers {
    cron 'H H(3-4) * * 1-5'
    issueCommentTrigger('(?i)(.*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*|/test(?:all))')
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  parameters {
    string(name: 'ELASTIC_STACK_VERSION', defaultValue: "8.0.0", description: "Elastic Stack Git branch/tag to use")
    string(name: 'BUILD_OPTS', defaultValue: "", description: "Additional build options to pass to compose.py")
    string(name: 'SLACK_CHANNEL', defaultValue: 'observablt-bots', description: 'The Slack channel where errors will be posted')
    booleanParam(name: 'Run_As_Master_Branch', defaultValue: false, description: 'Allow to run any steps on a PR, some steps normally only run on master branch.')
  }
  stages{
    /**
     Checkout the code and stash it, to use it on other stages.
    */
    stage('Checkout'){
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}",
                    reference: "${GIT_REFERENCE_REPO}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }

    stage('Tests'){
      parallel {
        /**
          Validate UTs and lint the app
        */
        stage('Unit Tests'){
          options { skipDefaultCheckout() }
          steps {
            withGithubNotify(context: 'Unit Tests', tab: 'tests') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                sh '.ci/scripts/unit-tests.sh'
              }
            }
          }
          post {
            always {
              junit(allowEmptyResults: true,
                keepLongStdio: true,
                testResults: "${BASE_DIR}/tests/results/*junit.xml")
            }
          }
        }
        stage('Sanity checks') {
          agent { label 'linux && immutable' }
          options { skipDefaultCheckout() }
          steps {
            withGithubNotify(context: 'Sanity checks', tab: 'tests') {
              deleteDir()
              unstash 'source'
              dir("${BASE_DIR}"){
                preCommit(commit: "${env.GIT_BASE_COMMIT}", junit: true)
              }
            }
          }
        }
      }
    }
    /**
      launch integration tests.
    */
    stage("Integration Tests") {
      steps {
        log(level: 'INFO', text: "Launching Agent tests in parallel")
        /*
          Declarative pipeline's parallel stages lose the reference to the downstream job,
          because of that, I use the parallel step. It is probably a bug.
          https://issues.jenkins-ci.org/browse/JENKINS-56562
        */
        script {
          def downstreamJobs = [:]
          if(env?.CHANGE_ID != null
              && !params.Run_As_Master_Branch
              && !'/testall'.equalsIgnoreCase(env?.GITHUB_COMMENT)
          ){
            downstreamJobs = ['All': {runJob('All')}]
          } else {
            downstreamJobs = [
            'All': {runJob('All')},
            '.NET': {runJob('.NET')},
            'Go': {runJob('Go')},
            'Java': {runJob('Java')},
            'Node.js': {runJob('Node.js')},
            'PHP': {runJob('PHP')},
            'Python': {runJob('Python')},
            'Ruby': {runJob('Ruby')},
            'RUM': {runJob('RUM')},
            'UI': {runJob('UI')}
            ]
          }
          parallel(downstreamJobs)
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(downstreamJobs: itsDownstreamJobs, slackComment: true, slackChannel: "#${params.SLACK_CHANNEL}")
    }
  }
}

def runJob(testName, buildOpts = ''){
  def mergeTarget = env.CHANGE_ID?.trim() ? env.CHANGE_TARGET : env.BRANCH_NAME
  def jobName = "apm-integration-test-downstream/${env.BRANCH_NAME}"
  def buildObject
  try {
    buildObject = build(job: jobName,
      parameters: [
      string(name: 'INTEGRATION_TEST', value: testName),
      string(name: 'ELASTIC_STACK_VERSION', value: params.ELASTIC_STACK_VERSION),
      string(name: 'INTEGRATION_TESTING_VERSION', value: "${env.GIT_BASE_COMMIT}"),
      string(name: 'MERGE_TARGET', value: "${mergeTarget}"),
      string(name: 'BUILD_OPTS', value: "${params.BUILD_OPTS} ${buildOpts}"),
      string(name: 'UPSTREAM_BUILD', value: currentBuild.fullDisplayName),
      booleanParam(name: 'DISABLE_BUILD_PARALLEL', value: '')],
      propagate: true,
      quietPeriod: 10,
      wait: true)
  } catch(e) {
    buildObject = e
    error("Downstream job for '${testName}' failed")
  } finally {
    itsDownstreamJobs["${testName}"] = buildObject

    catchError(buildResult: 'SUCCESS', message: "Aggregate test results from dowsntream job has failed failed. Let's keep moving.") {
      dir(testName) {
        copyArtifacts(projectName: jobName, selector: specific(buildNumber: buildObject.number.toString()))
        junit(testResults: '**/tests/results/*-junit*.xml', allowEmptyResults: true, keepLongStdio: true)
      }
    }
  }
}
