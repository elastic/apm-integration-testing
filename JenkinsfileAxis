#!/usr/bin/env groovy

pipeline {
  agent none
  environment {
    BASE_DIR = "src/github.com/elastic/apm-integration-testing"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
  }
   
  options {
    timeout(time: 1, unit: 'HOURS') 
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
  }
  parameters {
    string(name: 'branch_specifier', defaultValue: "", description: "the Git branch specifier to build (branchName, tagName, commitId, etc.)")
    string(name: 'ELASTIC_STACK_VERSION', defaultValue: "6.4", description: "Elastic Stack Git branch/tag to use")
    string(name: 'APM_SERVER_BRANCH', defaultValue: "master", description: "APM Server Git branch/tag to use")
    
    string(name: 'BUILD_OPTS', defaultValue: "", description: "Addicional build options to passing compose.py")
    string(name: 'BUILD_DESCRIPTION', defaultValue: "", description: "Build description to show in queue.")

    booleanParam(name: 'DISABLE_BUILD_PARALLEL', defaultValue: true, description: "Disable the build parallel option on compose.py, disable it is better for error detection.")
    booleanParam(name: 'go_Test', defaultValue: false, description: 'Enable Test')
    booleanParam(name: 'java_Test', defaultValue: false, description: 'Enable Test')
    booleanParam(name: 'nodejs_Test', defaultValue: false, description: 'Enable Test')
    booleanParam(name: 'python_Test', defaultValue: false, description: 'Enable Test')
    booleanParam(name: 'ruby_Test', defaultValue: false, description: 'Enable Test')
  }
  stages{
    stage('Checkout'){
      agent { label 'linux && immutable' }
      steps {
        gitCheckout(basedir: "${BASE_DIR}", branch: env?.branch_specifier, 
          repo: 'git@github.com:elastic/apm-integration-testing.git', 
          credentialsId: "${JOB_GIT_CREDENTIALS}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
        script {
          if(params?.BUILD_DESCRIPTION){
            currentBuild.description = "${params.BUILD_DESCRIPTION}"
          }
        }
      }
    }
    stage("Go") { 
      when { 
        beforeAgent true
        expression { return params.go_Test }
      }
      steps {
        runIntegrationTestAxis(source: 'source', agentType: "go")
      } 
    }
    stage("Java") { 
      when { 
        beforeAgent true
        expression { return params.java_Test }
      }
      steps {
        runIntegrationTestAxis(source: 'source', agentType: "java")
      }  
    }
    stage("Node.js") { 
      when { 
        beforeAgent true
        expression { return params.nodejs_Test }
      }
      steps {
        runIntegrationTestAxis(source: 'source', agentType: "nodejs")
      }
    }
    stage("Python") { 
      when { 
        beforeAgent true
        expression { return params.python_Test }
      }
      steps {
        runIntegrationTestAxis(source: 'source', agentType: "python")
      }
    }
    stage("Ruby") { 
      when { 
        beforeAgent true
        expression { return params.ruby_Test }
      }
      steps {
        runIntegrationTestAxis(source: 'source', agentType: "ruby")
      }
    }
  }
  post {
    success {
      echoColor(text: '[SUCCESS]', colorfg: 'green', colorbg: 'default')
    }
    aborted {
      echoColor(text: '[ABORTED]', colorfg: 'magenta', colorbg: 'default')
    }
    failure { 
      echoColor(text: '[FAILURE]', colorfg: 'red', colorbg: 'default')
      //step([$class: 'Mailer', notifyEveryUnstableBuild: true, recipients: "${NOTIFY_TO}", sendToIndividuals: false])
    }
    unstable { 
      echoColor(text: '[UNSTABLE]', colorfg: 'yellow', colorbg: 'default')
    }
  }
}