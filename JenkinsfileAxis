#!/usr/bin/env groovy

library identifier: 'apm@master',
changelog: false,
retriever: modernSCM(
  [$class: 'GitSCMSource', 
  credentialsId: 'f94e9298-83ae-417e-ba91-85c279771570', 
  id: '37cf2c00-2cc7-482e-8c62-7bbffef475e2', 
  remote: 'git@github.com:elastic/apm-pipeline-library.git'])
  
pipeline {
  agent { label 'linux && immutable' }
  environment {
    HOME = "${env.HUDSON_HOME}"
    BASE_DIR = "src/github.com/elastic/apm-integration-testing"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
  }
   
  options {
    timeout(time: 1, unit: 'HOURS') 
    buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10', daysToKeepStr: '30'))
    timestamps()
    //see https://issues.jenkins-ci.org/browse/JENKINS-11752, https://issues.jenkins-ci.org/browse/JENKINS-39536, https://issues.jenkins-ci.org/browse/JENKINS-54133 and jenkinsci/ansicolor-plugin#132
    //ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
  }
  parameters {
    string(name: 'branch_specifier', defaultValue: "", description: "the Git branch specifier to build (branchName, tagName, commitId, etc.)")
    string(name: 'ELASTIC_STACK_VERSION', defaultValue: "6.4", description: "Elastic Stack Git branch/tag to use")
    string(name: 'APM_SERVER_BRANCH', defaultValue: "master", description: "APM Server Git branch/tag to use")
    
    string(name: 'BUILD_OPTS', defaultValue: "", description: "Addicional build options to passing compose.py")

    booleanParam(name: 'DISABLE_BUILD_PARALLEL', defaultValue: true, description: "Disable the build parallel option on compose.py, disable it is better for error detection.")
    booleanParam(name: 'go_Test', defaultValue: false, description: 'Enable Test')
    booleanParam(name: 'java_Test', defaultValue: false, description: 'Enable Test')
    booleanParam(name: 'nodejs_Test', defaultValue: false, description: 'Enable Test')
    booleanParam(name: 'python_Test', defaultValue: false, description: 'Enable Test')
    booleanParam(name: 'ruby_Test', defaultValue: false, description: 'Enable Test')
  }
  stages{
    stage('Checkout'){
      agent { label 'master || linux' }
      steps {
        withEnvWrapper() {
          dir("${BASE_DIR}"){
            script{
              if(!env?.branch_specifier){
                echo "Checkout SCM"
                checkout scm
              } else {
                echo "Checkout ${branch_specifier}"
                checkout([$class: 'GitSCM', branches: [[name: "${branch_specifier}"]], 
                  doGenerateSubmoduleConfigurations: false, 
                  extensions: [], 
                  submoduleCfg: [], 
                  userRemoteConfigs: [[credentialsId: "${JOB_GIT_CREDENTIALS}", 
                  url: "${GIT_URL}"]]])
              }
              env.JOB_GIT_COMMIT = getGitCommitSha()
              env.JOB_GIT_URL = "${GIT_URL}"
              
              github_enterprise_constructor()
              
              on_change{
                echo "build cause a change (commit or PR)"
              }
              
              on_commit {
                echo "build cause a commit"
              }
              
              on_merge {
                echo "build cause a merge"
              }
              
              on_pull_request {
                echo "build cause PR"
              }
            }
          }
          stash allowEmpty: true, name: 'source'
          script {
            if(env.BUILD_DESCRIPTION){
              //currentBuild.displayName = "${currentBuild.displayName} ${BUILD_DESCRIPTION}"
              currentBuild.description = "${BUILD_DESCRIPTION}"
            }
          }
        }
      }
    }
    stage("Go") { 
      when { 
        beforeAgent true
        environment name: 'go_Test', value: 'true' 
      }
      steps {
        runIntegrationTestAxis(source: 'source', agentType: "go")
      } 
    }
    stage("Java") { 
      when { 
        beforeAgent true
        environment name: 'java_Test', value: 'true' 
      }
      steps {
        runIntegrationTestAxis(source: 'source', agentType: "java")
      }  
    }
    stage("Node.js") { 
      when { 
        beforeAgent true
        environment name: 'nodejs_Test', value: 'true' 
      }
      steps {
        runIntegrationTestAxis(source: 'source', agentType: "nodejs")
      }
    }
    stage("Python") { 
      when { 
        beforeAgent true
        environment name: 'python_Test', value: 'true' 
      }
      steps {
        runIntegrationTestAxis(source: 'source', agentType: "python")
      }
    }
    stage("Ruby") { 
      when { 
        beforeAgent true
        environment name: 'ruby_Test', value: 'true' 
      }
      steps {
        runIntegrationTestAxis(source: 'source', agentType: "ruby")
      }
    }
  }
}